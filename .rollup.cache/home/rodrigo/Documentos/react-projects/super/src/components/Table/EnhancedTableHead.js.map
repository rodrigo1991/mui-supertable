{"version":3,"file":"EnhancedTableHead.js","sourceRoot":"","sources":["EnhancedTableHead.tsx"],"names":[],"mappings":";;AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAC/E,OAAO,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAE7B,OAAO,eAAe,MAAM,yBAAyB,CAAC;AAStD,IAAM,iBAAiB,GAAG,UAAK,EAKH;QAJ1B,SAAS,eAAA,EACT,aAAa,mBAAA,EACb,SAAS,eAAA,EACT,OAAO,aAAA;IAEP,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAC3C,IAAM,iBAAiB,GACrB,UAAC,QAAgB,IAAK,OAAA,UAAC,KAAgC;QACrD,IAAI,aAAa;YAAE,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpD,CAAC,EAFqB,CAErB,CAAC;IAEJ,OAAO,CACL,KAAC,SAAS,cACR,MAAC,QAAQ,eACN,SAAS,CAAC,GAAG,CACZ,UAAC,QAAQ;oBACP,OAAA,CAAC,QAAQ,CAAC,IAAI;wBACd,CAAC,QAAQ,CAAC,WAAW,IAAI,CACvB,KAAC,SAAS,aAER,KAAK,EAAE,QAAQ,CAAC,KAAK,EACrB,SAAS,EAAC,IAAI,EACd,OAAO,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EACpD,aAAa,EACX,SAAS,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,gBAG1D,KAAC,cAAc,aACb,MAAM,EAAE,SAAS,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,EACvC,SAAS,EACP,SAAS,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAE1D,OAAO,EAAE,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,EACvC,EAAE,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,gBAE3B,QAAQ,CAAC,KAAK,IACA,KAjBZ,QAAQ,CAAC,EAAE,CAkBN,CACb;gBAtBD,CAsBC,CACJ,EACA,OAAO,IAAI,CACV,KAAC,eAAe,aAAe,KAAK,EAAC,QAAQ,EAAC,SAAS,EAAC,IAAI,+BAAvC,SAAS,CAEZ,CACnB,IACQ,GACD,CACb,CAAC;AACJ,CAAC,CAAC;AACF,eAAe,IAAI,CAAC,iBAAiB,CAA6B,CAAC","sourcesContent":["import { TableCell, TableRow, TableHead, TableSortLabel } from \"@mui/material\";\nimport { memo } from \"react\";\n\nimport ActionTableCell from \"./StyledTableActionCell\";\nimport { HeadCell, TableSortModel } from \"./types\";\n\ninterface EnhancedTableHeadProps<T> {\n  sortModel: TableSortModel<T>;\n  onRequestSort?: (event: React.MouseEvent<unknown>, property: string) => void;\n  headCells: HeadCell<T>[];\n  actions: boolean;\n}\nconst EnhancedTableHead = <T,>({\n  sortModel,\n  onRequestSort,\n  headCells,\n  actions,\n}: EnhancedTableHeadProps<T>) => {\n  console.log(\"Rendeting EnhancedTableHead\");\n  const createSortHandler =\n    (property: string) => (event: React.MouseEvent<unknown>) => {\n      if (onRequestSort) onRequestSort(event, property);\n    };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map(\n          (headCell) =>\n            !headCell.hide &&\n            !headCell.collapsible && (\n              <TableCell\n                key={headCell.id}\n                align={headCell.align}\n                component=\"th\"\n                padding={headCell.disablePadding ? \"none\" : \"normal\"}\n                sortDirection={\n                  sortModel.field === headCell.id ? sortModel.sort : false\n                }\n              >\n                <TableSortLabel\n                  active={sortModel.field === headCell.id}\n                  direction={\n                    sortModel.field === headCell.id ? sortModel.sort : \"asc\"\n                  }\n                  onClick={createSortHandler(headCell.id)}\n                  sx={{ whiteSpace: \"nowrap\" }}\n                >\n                  {headCell.label}\n                </TableSortLabel>\n              </TableCell>\n            )\n        )}\n        {actions && (\n          <ActionTableCell key=\"actions\" align=\"center\" component=\"th\">\n            Acciones\n          </ActionTableCell>\n        )}\n      </TableRow>\n    </TableHead>\n  );\n};\nexport default memo(EnhancedTableHead) as typeof EnhancedTableHead;\n"]}