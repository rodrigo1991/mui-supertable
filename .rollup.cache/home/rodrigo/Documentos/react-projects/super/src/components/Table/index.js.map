{"version":3,"file":"index.js","sourceRoot":"","sources":["index.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableContainer,\n  useMediaQuery,\n} from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { ComponentType, memo, useCallback, useMemo, useState } from \"react\";\n\nimport CenterSpinner from \"./CenterSpinner\";\nimport EnhancedTableToolbar from \"./EnhancedTableToolbar\";\nimport EnhancedTableHead from \"./EnhancedTableHead\";\n// import Row from './Row';\nimport Rows from \"./Rows\";\nimport {\n  FilterValue,\n  HeadCell,\n  ActionProps,\n  TableSortModel,\n  IdBase,\n  FooterChips,\n} from \"./types\";\nimport EnhancedTableFooter from \"./EnhancedTableFooter\";\nimport EnhancedTablePagination from \"./EnhancedTablePagination\";\n\ninterface EnhancedTableProps<T> {\n  // reload?: () => void;\n  setReload?: (reload: boolean | ((prevVar: boolean) => boolean)) => void;\n  csvExport?: () => Promise<void>;\n  filterValue?: FilterValue;\n  setFilterValue?: (\n    filter: FilterValue | ((prevVar: FilterValue) => FilterValue)\n  ) => void;\n  loading: boolean;\n  rows: T[];\n  headCells: HeadCell<T>[];\n  footerChips?: FooterChips;\n  rowCount: number;\n  page: number;\n  pageSize: number;\n  onPageChange?: (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    page: number\n  ) => void;\n  onRowsPerPageChange?: (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => void;\n  sortModel: TableSortModel<T>;\n  onRequestSort?: (event: React.MouseEvent<unknown>, property: string) => void;\n  rowColor?: Record<string, string>;\n  colorField?: string[];\n  title?: string;\n  add?: (value: boolean | ((prevVar: boolean) => boolean)) => void;\n  Actions?: ComponentType<ActionProps<T>>;\n  ht?: number;\n}\n\nconst EnhancedTable = <T extends IdBase>({\n  // reload,\n  setReload,\n  csvExport,\n  filterValue,\n  setFilterValue,\n  loading,\n  headCells,\n  rows,\n  footerChips,\n  rowCount,\n  page,\n  pageSize,\n  onPageChange,\n  onRowsPerPageChange,\n  sortModel,\n  onRequestSort,\n  rowColor,\n  colorField,\n  title,\n  add,\n  Actions,\n  ht,\n}: EnhancedTableProps<T>) => {\n  console.log(\"ðŸš€ ~ file: index.tsx:84 ~ EnhancedTable\", rows);\n\n  const [filterCount, setFilterCount] = useState(0);\n\n  const theme = useTheme();\n\n  const sm = useMediaQuery(theme.breakpoints.up(\"sm\"));\n  const size = sm ? 680 : 600;\n\n  const chips = footerChips\n    ? footerChips(sm, setFilterValue, setFilterCount)\n    : null;\n\n  const memoizedonRequestSort = useCallback(\n    (event: React.MouseEvent<unknown>, property: string) =>\n      onRequestSort && onRequestSort(event, property),\n    [sortModel]\n  );\n\n  const memoizedCsvExport = useCallback(() => csvExport && csvExport(), []);\n  const memoizedSetFilterValue = useCallback(\n    (filter: FilterValue | ((prevVar: FilterValue) => FilterValue)) =>\n      setFilterValue && setFilterValue(filter),\n    [setFilterValue]\n  );\n  const memoizedSetFilterCount = useCallback(\n    (value: number | ((prevVar: number) => number)) => setFilterCount(value),\n    []\n  );\n  const memoizedOnPageChange = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement> | null, p: number) =>\n      onPageChange && onPageChange(event, p),\n    []\n  );\n  const memoizedOnRowsPerPageChange = useCallback(\n    (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n      onRowsPerPageChange && onRowsPerPageChange(event),\n    []\n  );\n\n  // const memoizedRows = useMemo(() => rows, []);\n  const memoizedRowColor = useMemo(() => rowColor, [rowColor]);\n  const memoizedColorField = useMemo(() => colorField, []);\n\n  // const memoizedReload = useCallback(() => reload && reload(), []);\n\n  // const memoizedSetReload = useCallback(\n  //   (reload: boolean | ((prev: boolean) => boolean)) =>\n  //     setReload && setReload(reload),\n  //   []\n  // );\n\n  // const MemoizedRows = useMemo(\n  //   () => (\n  //     <>\n  //       {rows.map(row => (\n  //         <Row\n  //           row={row}\n  //           key={row.id}\n  //           headCells={headCells}\n  //           rowColor={rowColor}\n  //           colorField={colorField}\n  //           Actions={Actions}\n  //           setFilterValue={memoizedSetFilterValue}\n  //           onPageChange={memoizedOnPageChange}\n  //         />\n  //       ))}\n  //     </>\n  //   ),\n  //   [rows]\n  // );\n\n  return (\n    <Paper\n      sx={{\n        width: \"100%\",\n        overflow: \"hidden\",\n        p: 2,\n        backgroundColor: \"background.default\",\n      }}\n    >\n      <EnhancedTableToolbar<T>\n        // reload={reload && memoizedReload}\n        setReload={setReload}\n        csvExport={csvExport && memoizedCsvExport}\n        filterValue={filterValue}\n        setFilterValue={memoizedSetFilterValue}\n        headCells={headCells}\n        filterCount={filterCount}\n        setFilterCount={memoizedSetFilterCount}\n        title={title}\n        add={add}\n      />\n      <TableContainer sx={{ height: ht || size }}>\n        {loading && <CenterSpinner disableShrink />}\n        <Table aria-labelledby=\"tableTitle\" size=\"small\" stickyHeader>\n          <EnhancedTableHead<T>\n            sortModel={sortModel}\n            onRequestSort={memoizedonRequestSort}\n            headCells={headCells}\n            actions={!!Actions}\n          />\n          <TableBody\n            sx={{\n              opacity: loading ? 0.5 : 1,\n            }}\n          >\n            <Rows\n              rows={rows}\n              headCells={headCells}\n              rowColor={memoizedRowColor}\n              colorField={memoizedColorField}\n              Actions={Actions}\n              setReload={setReload}\n              onPageChange={memoizedOnPageChange}\n            />\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {chips && <EnhancedTableFooter chips={chips} sm={sm} />}\n      {onPageChange && onRowsPerPageChange && (\n        <EnhancedTablePagination\n          rowCount={rowCount}\n          pageSize={pageSize}\n          page={page}\n          onPageChange={memoizedOnPageChange}\n          onRowsPerPageChange={memoizedOnRowsPerPageChange}\n          sm={sm}\n        />\n      )}\n    </Paper>\n  );\n};\n// const MemoizedComponent = memo(EnhancedTable) as typeof EnhancedTable;\n// export default MemoizedComponent;\nexport default memo(\n  EnhancedTable\n  // (prevProps, nextProps) =>isEqual(prevProps, nextProps)\n) as typeof EnhancedTable;\n"]}