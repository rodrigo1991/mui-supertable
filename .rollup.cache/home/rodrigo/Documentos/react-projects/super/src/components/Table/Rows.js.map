{"version":3,"file":"Rows.js","sourceRoot":"","sources":["Rows.tsx"],"names":[],"mappings":"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","sourcesContent":["import CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\nimport { TableRow } from \"@mui/material\";\nimport { ComponentType, memo } from \"react\";\nimport Link from \"next/link\";\nimport { format } from \"rut.js\";\n\nimport { currencyFormat, formatFecha } from \"./helper\";\nimport StyledTableCell from \"./StyledTableCell\";\nimport { ActionProps, CellType, HeadCell, IdBase } from \"./types\";\n\ninterface RowsProps<T> {\n  rows: T[];\n  headCells: HeadCell<T>[];\n  rowColor?: Record<string, string>;\n  colorField?: string[];\n  setReload?: (reload: boolean | ((prev: boolean) => boolean)) => void;\n  onPageChange?: (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    page: number\n  ) => void;\n  Actions?: ComponentType<ActionProps<T>>;\n}\n\nconst Rows = <T extends IdBase>({\n  rows,\n  headCells,\n  rowColor,\n  colorField,\n  Actions,\n  setReload,\n  onPageChange,\n}: RowsProps<T>) => {\n  console.log(\"ðŸš€ ~ file: Row.tsx:35 ~ row\");\n  const formatCell = (\n    val: string | number | boolean | null | undefined,\n    type: CellType\n  ) => {\n    let formatted = null;\n    switch (type) {\n      case \"currency\":\n        if (typeof val === \"number\" || typeof val === \"string\")\n          formatted = currencyFormat(val);\n        break;\n      case \"rut\":\n        if (typeof val === \"string\") formatted = format(val);\n        break;\n      case \"date\":\n        if (typeof val === \"string\") formatted = formatFecha(val);\n        break;\n      case \"boolean\":\n        formatted = val ? <CheckBoxIcon /> : <CheckBoxOutlineBlankIcon />;\n        break;\n      default:\n        formatted = val;\n        break;\n    }\n    return formatted;\n  };\n\n  const getVal = (keys: string[], row: T) => {\n    let val: any = row[keys[0] as keyof T];\n    for (let i = 1; i < keys.length; i += 1) {\n      const key = keys[i] as keyof typeof val;\n      val &&= typeof val === \"object\" ? val[key] : val;\n    }\n    return val;\n  };\n\n  // if (colorField && rowColor) {\n  //   const colorKey = getVal(colorField);\n  //   backgroundColor = rowColor[colorKey];\n  // }\n\n  // const backgroundColor =\n  //   colorField && rowColor ? rowColor[getVal(colorField, row)] : null;\n\n  return (\n    <>\n      {rows.map((row) => (\n        <TableRow\n          key={row.id}\n          hover\n          sx={{\n            backgroundColor:\n              colorField && rowColor ? rowColor[getVal(colorField, row)] : null,\n            // '& > *': { borderBottom: 'unset' },\n          }}\n        >\n          {headCells.map((cell) => {\n            const { id } = cell;\n            const val = getVal(id.split(\".\"), row);\n            const slug =\n              cell.link?.slug && getVal(cell.link.slug.split(\".\"), row);\n            const href = slug\n              ? `${cell.link?.href}/${slug}`\n              : cell.link?.href || null;\n            return (\n              <StyledTableCell key={id}>\n                {href && val ? (\n                  <Link href={href}>{`${formatCell(val, cell.type)}`}</Link>\n                ) : (\n                  formatCell(val, cell.type)\n                )}\n              </StyledTableCell>\n            );\n          })}\n          {Actions && (\n            <Actions\n              row={row}\n              setReload={setReload}\n              onPageChange={onPageChange}\n            />\n          )}\n        </TableRow>\n      ))}\n    </>\n  );\n};\nexport default memo(Rows) as typeof Rows;\n\n// export default Rows;\n"]}